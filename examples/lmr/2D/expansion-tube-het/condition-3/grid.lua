-- grid.lua
-- lmr(5) script for Hypervelocity Expansion Tube simulation
-- Peter J. 2025-02-09
--
print("Hypervelocity Expansion Tube, Caltech")
config.dimensions = 2
config.axisymmetric = true
-- config.viscous = true
config.viscous = false -- TEMPORARY
config.grid_format = 'rawbinary'
--
xA = 0.0  -- Upstream end of driver
xB = 1.22 -- Diaphragm 1, start of shock tube
xC = 5.18 -- Diaphragm 2, start of acceleration tube
xD = 9.14 -- Exit of acceleration tube
Rtube = 0.0762 -- 6-inch diameter tube

--  Schematic diagram of the simulation domain.
--  y
--  ^
--  | driver  intermediate    acceleration
--  |  tube       tube            tube
--  A1-------B1----------C1-----------------D1
--  |        |           |                   |
--  |   [0]  |    [1]    |        [2]        |
--  |        |           |                   |
--  A0-------B0----------C0-----------------D0 -----> x-axis
--           ^           ^                   ^
--         diaphragm-1   diaphragm-2         exit
--
A0 = {x=xA, y=0.0}; A1 = {x=xA, y=Rtube}
B0 = {x=xB, y=0.0}; B1 = {x=xB, y=Rtube}
C0 = {x=xC, y=0.0}; C1 = {x=xC, y=Rtube}
D0 = {x=xD, y=0.0}; D1 = {x=xD, y=Rtube}
quad0 = CoonsPatch:new{p00=A0, p10=B0, p11=B1, p01=A1}
quad1 = CoonsPatch:new{p00=B0, p10=C0, p11=C1, p01=B1}
quad2 = CoonsPatch:new{p00=C0, p10=D0, p11=D1, p01=C1}
--
-- Distribute the cells between the three segments of the tube.
-- Use factor to scale the numbers of cells in the simulation.
-- A factor of 1 is a low-resolution calculation.
factor = 1
nxcells_total = math.floor(factor*2406)
nxcells_d = math.floor((xB/xD)*nxcells_total + 0.5)
nxcells_i = math.floor(((xC-xB)/xD)*nxcells_total + 0.5)
nxcells_a = math.floor(((xD-xC)/xD)*nxcells_total + 0.5)
print("nxcells in driver: ", nxcells_d)
print("nxcells in int.: ", nxcells_i)
print("nxcells in acc.: ", nxcells_a)
print("total= ", nxcells_d + nxcells_i + nxcells_a)
--
nycells = math.floor(factor*3) -- TEMPORARY should be 30 rather than 3
beta = 1.1
--
clusterToWall = RobertsFunction:new{end0=false, end1=true, beta=beta}
--
grid0 = StructuredGrid:new{psurface=quad0, niv=nxcells_d+1, njv=nycells+1,
                           cfList={west=clusterToWall, east=clusterToWall}}
grid1 = StructuredGrid:new{psurface=quad1, niv=nxcells_i+1, njv=nycells+1,
                           cfList={west=clusterToWall, east=clusterToWall}}
grid2 = StructuredGrid:new{psurface=quad2, niv=nxcells_a+1, njv=nycells+1,
                           cfList={west=clusterToWall, east=clusterToWall}}
-- Subdivide the grids so that we can run in parallel.
factorB = 1
nib_d = math.floor(2*factorB)
nib_i = math.floor(nib_d*(xC-xB)/xB)
nib_a = math.floor(nib_d*(xD-xC)/xB)
nblocks_total = nib_d + nib_i + nib_a
print("total number of blocks= ", nblocks_total)
registerFluidGridArray{grid=grid0, fsTag='driver_gas', nib=nib_d, njb=1,
                       bcTags={north='warmWall', west='warmWall'}}
registerFluidGridArray{grid=grid1, fsTag='test_gas', nib=nib_i, njb=1,
                       bcTags={north='coldWall', east='upstream_face_of_diaphragm'}}
registerFluidGridArray{grid=grid2, fsTag='acceleration_gas', nib=nib_a, njb=1,
                       bcTags={north='coldWall', east='outFlow',
                               west='downstream_face_of_diaphragm'}}
-- Do not use identifyGridConnections()
-- Blanket use of identifyGridConnections() will overwrite
-- the custom diaphragm connection, so connect the grids explicitly.
-- We assume that diaphragm 1 is open from the start of the simulation
-- so we want to connect the upstream (east) end of the driver tube
-- to the upstream (west) end of the intermediate tube.
-- Note that the counting of the gridArraysList starts at 1,
-- as per Lua's convention.
connectGrids(gridArraysList[1].myGrids[nib_d][1].id, 'east',
             gridArraysList[2].myGrids[1][1].id, 'west')
--
-- We want to tell the other scripts which blocks
-- are upstream and downstream of diaphragm-2.
f = io.open('blkIds.lua', 'w')
f:write("-- Secondary diaphragm block identities.\n")
f:write("-- Note that is file is generated by the grid.lua script.\n")
f:write(string.format("upstreamBlk = %d\n", gridArraysList[2].myGrids[nib_i][1].id))
f:write(string.format("downstreamBlk = %d\n", gridArraysList[3].myGrids[1][1].id))
f:close()
