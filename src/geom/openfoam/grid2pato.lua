-- grid2pato.lua
-- Lua helper definitions for the D program: grid2pato
--
-- Authors: Reece O.
-- Date: 2025-02-18

require "openfoam"

-- naming conventions for files and directories
materialPrefix = "porousMat"
originDir = "origin.0"

-- material-specific directories
constantMatDir = constantDir.."/"..materialPrefix
systemMatDir = systemDir.."/"..materialPrefix
originMatDir = originDir.."/"..materialPrefix

-- Global settings
energyModel = "PureConduction"
material = "TACOT"

energyModelList = {
   "PureConduction"
}

materialList = {
   "TACOT"
}

function checkPATOFlag(blks, vrbLvl)
   for ib=1,#blks do
      if (blks[ib].pato ~= true) then
         msg = string.format("PATO flag was not set to 'true' for FoamBlock: %d.", ib)
         error(msg)
      end
   end
end

function checkSetting(value, allowedValues, settingName)
   local labelOK = false
   for _,allowed in ipairs(allowedValues) do
      if (value == allowed) then
         labelOK = true
      end
   end
   -- If labelOK is still false at end, then this particular
   -- label was badly formed.
   if not labelOK then
      print(string.format("The %s '%s' is not allowed.", settingName, value))
      print("Allowed values are:")
      for _,allowed in ipairs(allowedValues) do
         print(allowed)
      end
      os.exit(1)
   end
end

function writeCreatePatchDict(grid, blks)
   if (vrbLvl >= 1) then
      print("Writing out file: createPatchDict.")
   end
   makeDir(systemDir)
   makeDir(systemMatDir)

   fname = systemDir.."/createPatchDict"
   f = assert(io.open(fname, 'w'))
   f:write(string.format("// Auto-generated by grid2pato on %s\n", os.date("%d-%b-%Y at %X")))
   f:write("\n")
   f:write("FoamFile\n")
   f:write("{\n")
   f:write("    version     2.0;\n")
   f:write("    format      ascii;\n")
   f:write("    class       dictionary;\n")
   f:write("    object      createPatchDict;\n")
   f:write("}\n")
   f:write("\n")
   f:write("pointSync false;\n")
   f:write("\n")
   f:write("patches\n")
   f:write("(\n")
   for label,_ in pairs(globalBndryLabels) do
      bType = "patch"
      if label == "FrontAndBack" then
         bType = "empty"
      end
      if label == "wedge-front" or label == "wedge-rear" then
         bType = "symmetry"
      end
      if label == "unassigned" then
         bType = "unassigned"
      end
      labelPrefix = string.sub(label, 1, 2)
      if labelPrefix == "w-" then
         bType = "wall"
      end
      if labelPrefix == "i-" then
         bType = "wall"
      end
      if labelPrefix == "a-" then
         bType = "patch"
      end
      if labelPrefix == "s-" then
         bType = "symmetry"
      end
      f:write("    {\n")
      f:write(string.format("        name %s;\n", label))
      f:write("        patchInfo\n")
      f:write("        {\n")
      f:write(string.format("            type  %s;\n", bType))
      f:write("        }\n")
      f:write("        constructFrom patches;\n")
      f:write("        patches (\n")
      for ib, blk in ipairs(blks) do
         for bndry, bndryLabel in pairs(blk.bndry_labels) do
            if (bndryLabel == label) then
               iBndry = 6*(ib-1) + faceMap[bndry]
               tag = grid:get_boundaryset_tag(iBndry)
               if (not grid:is_boundaryset_empty(iBndry)) then
                  f:write(string.format("            %s \n", tag))
               end
            end
         end
      end
      f:write("        );\n")
      f:write("    }\n")
   end
   f:write(");\n")
   f:close()
   if (vrbLvl >= 1) then
      print("   DONE: Writing out file: createPatchDict.")
   end
end

function write_p_file(dirName)
   if (vrbLvl >= 1) then
      print("   Writing p file.")
   end
   fname = string.format("%s/p",dirName)
   f = assert(io.open(fname, 'w'))
   writeFoamHeader(f)
   f:write("    class       volScalarField;\n")
   f:write('    location    "0";\n')
   f:write("    object      p;\n")
   f:write("}\n")
   f:write("// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * // \n")
   f:write("\n")
   f:write("dimensions      [0 0 1 0 0 0 0];\n")
   f:write("\n")
   f:write("internalField   uniform 101325; \n")
   f:write("\n")
   f:write("boundaryField \n")
   f:write("{ \n")
   -- now go through globalBndryLabels list
   for label,_ in pairs(globalBndryLabels) do
      writeStandardBC(f, label)
      labelPrefix = string.sub(label, 1, 2)
      if labelPrefix == "w-" then
         f:write(string.format("    %s\n", label))
         f:write("    { \n")
         f:write("        type    fixedValue;\n")
         f:write("        value   uniform 101325;\n")
         f:write("    }\n")
      end
      if labelPrefix == "i-" then
         f:write(string.format("    %s\n", label))
         f:write("    { \n")
         f:write("        type    fixedValue;\n")
         f:write("        value   uniform 101325;\n")
         f:write("    }\n")
      end
      if labelPrefix == "a-" then
         f:write(string.format("    %s\n", label))
         f:write("    { \n")
         f:write("        type    fixedValue;\n")
         f:write("        value   uniform 101325;\n")
         f:write("    }\n")
      end
      if labelPrefix == "s-" then
         f:write(string.format("    %s\n", label))
         f:write("    { \n")
         f:write("        type    symmetry;\n")
         f:write("    }\n")
      end
   end
   f:write("}\n")
   f:write("\n")
   f:write("// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * // \n")
   f:close()
  if (vrbLvl >= 1) then
      print("      DONE: Writing p file.")
   end
end

function write_cp_file(dirName)
   if (vrbLvl >= 1) then
      print("   Writing cp file.")
   end
   fname = string.format("%s/cp",dirName)
   f = assert(io.open(fname, 'w'))
   writeFoamHeader(f)
   f:write("    class       volScalarField;\n")
   f:write('    location    "0";\n')
   f:write("    object      cp;\n")
   f:write("}\n")
   f:write("// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * // \n")
   f:write("\n")
   f:write("dimensions      [0 2 -2 -1 0 0 0];\n")
   f:write("\n")
   f:write("internalField   uniform 300; \n")
   f:write("\n")
   f:write("boundaryField \n")
   f:write("{ \n")
   -- now go through globalBndryLabels list
   for label,_ in pairs(globalBndryLabels) do
      writeStandardBC(f, label)
      labelPrefix = string.sub(label, 1, 2)
      if labelPrefix == "w-" then
         f:write(string.format("    %s\n", label))
         f:write("    { \n")
         f:write("        type    calculated;\n")
         f:write("        value   uniform 300;\n")
         f:write("    }\n")
      end
      if labelPrefix == "i-" then
         f:write(string.format("    %s\n", label))
         f:write("    { \n")
         f:write("        type    calculated;\n")
         f:write("        value   uniform 300;\n")
         f:write("    }\n")
      end
      if labelPrefix == "a-" then
         f:write(string.format("    %s\n", label))
         f:write("    { \n")
         f:write("        type    calculated;\n")
         f:write("        value   uniform 300;\n")
         f:write("    }\n")
      end
      if labelPrefix == "s-" then
         f:write(string.format("    %s\n", label))
         f:write("    { \n")
         f:write("        type    symmetry;\n")
         f:write("    }\n")
      end
   end
   f:write("}\n")
   f:write("\n")
   f:write("// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * // \n")
   f:close()
  if (vrbLvl >= 1) then
      print("      DONE: Writing cp file.")
   end
end

function write_k_file(dirName)
   if (vrbLvl >= 1) then
      print("   Writing k file.")
   end
   fname = string.format("%s/k",dirName)
   f = assert(io.open(fname, 'w'))
   writeFoamHeader(f)
   f:write("    class       volTensorField;\n")
   f:write('    location    "0";\n')
   f:write("    object      k;\n")
   f:write("}\n")
   f:write("// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * // \n")
   f:write("\n")
   f:write("dimensions      [1 1 -3 -1 0 0 0];\n")
   f:write("\n")
   f:write("internalField   uniform (1 0 0 0 1 0 0 0 1); \n")
   f:write("\n")
   f:write("boundaryField \n")
   f:write("{ \n")
   -- now go through globalBndryLabels list
   for label,_ in pairs(globalBndryLabels) do
      writeStandardBC(f, label)
      labelPrefix = string.sub(label, 1, 2)
      if labelPrefix == "w-" then
         f:write(string.format("    %s\n", label))
         f:write("    { \n")
         f:write("        type    calculated;\n")
         f:write("        value   uniform (1 0 0 0 1 0 0 0 1);\n")
         f:write("    }\n")
      end
      if labelPrefix == "i-" then
         f:write(string.format("    %s\n", label))
         f:write("    { \n")
         f:write("        type    calculated;\n")
         f:write("        value   uniform (1 0 0 0 1 0 0 0 1);\n")
         f:write("    }\n")
      end
      if labelPrefix == "a-" then
         f:write(string.format("    %s\n", label))
         f:write("    { \n")
         f:write("        type    calculated;\n")
         f:write("        value   uniform (1 0 0 0 1 0 0 0 1);\n")
         f:write("    }\n")
      end
      if labelPrefix == "s-" then
         f:write(string.format("    %s\n", label))
         f:write("    { \n")
         f:write("        type    symmetry;\n")
         f:write("    }\n")
      end
   end
   f:write("}\n")
   f:write("\n")
   f:write("// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * // \n")
   f:close()
  if (vrbLvl >= 1) then
      print("      DONE: Writing k file.")
   end
end

function write_rho_s_file(dirName)
   if (vrbLvl >= 1) then
      print("   Writing rho_s file.")
   end
   fname = string.format("%s/rho_s",dirName)
   f = assert(io.open(fname, 'w'))
   writeFoamHeader(f)
   f:write("    class       volScalarField;\n")
   f:write('    location    "0";\n')
   f:write("    object      rho_s;\n")
   f:write("}\n")
   f:write("// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * // \n")
   f:write("\n")
   f:write("dimensions      [1 -3 0 0 0 0 0];\n")
   f:write("\n")
   f:write("internalField   uniform 300; \n")
   f:write("\n")
   f:write("boundaryField \n")
   f:write("{ \n")
   -- now go through globalBndryLabels list
   for label,_ in pairs(globalBndryLabels) do
      writeStandardBC(f, label)
      labelPrefix = string.sub(label, 1, 2)
      if labelPrefix == "w-" then
         f:write(string.format("    %s\n", label))
         f:write("    { \n")
         f:write("        type    calculated;\n")
         f:write("        value   uniform 300;\n")
         f:write("    }\n")
      end
      if labelPrefix == "i-" then
         f:write(string.format("    %s\n", label))
         f:write("    { \n")
         f:write("        type    calculated;\n")
         f:write("        value   uniform 300;\n")
         f:write("    }\n")
      end
      if labelPrefix == "a-" then
         f:write(string.format("    %s\n", label))
         f:write("    { \n")
         f:write("        type    calculated;\n")
         f:write("        value   uniform 300;\n")
         f:write("    }\n")
      end
      if labelPrefix == "s-" then
         f:write(string.format("    %s\n", label))
         f:write("    { \n")
         f:write("        type    symmetry;\n")
         f:write("    }\n")
      end
   end
   f:write("}\n")
   f:write("\n")
   f:write("// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * // \n")
   f:close()
  if (vrbLvl >= 1) then
      print("      DONE: Writing rho_s file.")
   end
end

function write_Ta_file(dirName)
   if (vrbLvl >= 1) then
      print("   Writing Ta file.")
   end
   fname = string.format("%s/Ta",dirName)
   f = assert(io.open(fname, 'w'))
   writeFoamHeader(f)
   f:write("    class       volScalarField;\n")
   f:write('    location    "0";\n')
   f:write("    object      Ta;\n")
   f:write("}\n")
   f:write("// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * // \n")
   f:write("\n")
   f:write("dimensions      [0 0 0 1 0 0 0];\n")
   f:write("\n")
   f:write("internalField   uniform 300; \n")
   f:write("\n")
   f:write("boundaryField \n")
   f:write("{ \n")
   -- now go through globalBndryLabels list
   for label,_ in pairs(globalBndryLabels) do
      writeStandardBC(f, label)
      labelPrefix = string.sub(label, 1, 2)
      if labelPrefix == "w-" then
         f:write(string.format("    %s\n", label))
         f:write("    { \n")
         f:write("        type    calculated;\n")
         f:write("        value   uniform 300;\n")
         f:write("    }\n")
      end
      if labelPrefix == "i-" then
         f:write(string.format("    %s\n", label))
         f:write("    { \n")
         f:write("        type    fixedValue;\n")
         f:write("        value   uniform 300;\n")
         f:write("    }\n")
      end
      if labelPrefix == "a-" then
         f:write(string.format("    %s\n", label))
         f:write("    { \n")
         f:write("        type    zeroGradient;\n")
         f:write("    }\n")
      end
      if labelPrefix == "s-" then
         f:write(string.format("    %s\n", label))
         f:write("    { \n")
         f:write("        type    symmetry;\n")
         f:write("    }\n")
      end
   end
   f:write("}\n")
   f:write("\n")
   f:write("// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * // \n")
   f:close()
   if (vrbLvl >= 1) then
      print("      DONE: Writing Ta file.")
   end
end

function write_regionProperties_file(dirName)
   if (vrbLvl >= 1) then
      print("   Writing regionProperties file.")
   end
   f = assert(io.open(string.format("%s/regionProperties", dirName), 'w'))
   writeFoamHeader(f)
   f:write("    class       dictionary;\n")
   f:write('    location    "constant";\n')
   f:write("    object      regionProperties;\n")
   f:write("}\n")
   f:write("// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * // \n")
   f:write("\n")
   f:write("regions \n")
   f:write("( \n")
   f:write("    solid       (porousMat)\n")
   f:write(");\n")
   f:write("// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * // \n")
   f:close()
   if (vrbLvl >= 1) then
      print("      DONE: Writing regionProperties file.")
   end
end

function write_porousMatProperties_file(dirName)
   if (vrbLvl >= 1) then
      print("   Writing porousMatProperties file.")
   end
   f = assert(io.open(string.format("%s/porousMatProperties", dirName), 'w'))
   writeFoamHeader(f)
   f:write("    class       dictionary;\n")
   f:write('    location    "constant";\n')
   f:write("    object      regionProperties;\n")
   f:write("}\n")
   f:write("// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * // \n")
   f:write("\n")

   -- general settings
   f:write("/****************************** GENERAL ***********************************/ \n")
   f:write("//debug yes;\n")
   f:write("movingMesh no;\n")
   f:write("/****************************** END GENERAL *******************************/ \n")
   f:write("\n")

   -- IO settings
   f:write("/****************************** IO ****************************************/ \n")
   f:write("IO {\n")
   f:write("  writeFields(); \n")
   f:write("}\n")
   f:write("/****************************** END IO ************************************/ \n")
   f:write("\n")

   -- mass model settings
   f:write("/****************************** MASS **************************************/ \n")
   f:write("Mass {\n")
   f:write("  createFields ((p volScalarField)); \n")
   f:write("}\n")
   f:write("/****************************** END MASS **********************************/ \n")
   f:write("\n")

   -- energy model settings
   f:write("/****************************** ENERGY ************************************/ \n")
   f:write("Energy {\n")
   if energyModel == "PureConduction" then
      f:write("  EnergyType PureConduction; \n")
   end
   f:write("}\n")
   f:write("/****************************** END ENERGY ********************************/ \n")
   f:write("\n")

   -- material properties
   f:write("/****************************** MATERIAL PROPERTIES  **********************/ \n")
   f:write("MaterialProperties {\n")
   if material == "TACOT" then
      f:write("  MaterialPropertiesType Porous; \n")
      f:write("  MaterialPropertiesDirectory \"$PATO_DIR/data/Materials/Composites/TACOT\"; \n")
   end
   f:write("}\n")
   f:write("/****************************** END MATERIAL PROPERTIES  ******************/ \n")
   f:write("\n")

   -- pyrolysis model settings
   f:write("/****************************** PYROLYSIS *********************************/ \n")
   f:write("Pyrolysis {\n")
   f:write("  PyrolysisType virgin; \n")
   f:write("}\n")
   f:write("/****************************** END PYROLYSIS *****************************/ \n")
   f:write("\n")
   
   f:write("// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * // \n")
   f:close()
   if (vrbLvl >= 1) then
      print("      DONE: Writing porousMatProperties file.")
   end
end

function writeOriginDir()
   if (vrbLvl >= 1) then
      print("Creating initial & boundary condition templates.")
   end

   makeDir(originDir)
   makeDir(originMatDir)
   if energyModel == "PureConduction" then
      write_cp_file(originMatDir)
      write_k_file(originMatDir)
      write_p_file(originMatDir)
      write_rho_s_file(originMatDir)
      write_Ta_file(originMatDir)
   end

   if (vrbLvl >= 1) then
      print("   DONE: Creating IC and BC templates.")
   end
end

function writeConstantDir()
   if (vrbLvl >= 1) then
      print("Creating constant property templates.")
   end

   makeDir(constantDir)
   makeDir(constantMatDir)
   write_regionProperties_file(constantDir)
   write_porousMatProperties_file(constantMatDir)

   if (vrbLvl >= 1) then
      print("   DONE: Creating constant property templates.")
   end
end

function writeSystemDir()
   if (vrbLvl >= 1) then
      print("Creating system templates.")
   end

   makeDir(systemDir)
   makeDir(systemMatDir)
   -- TODO: add fvSchemes, fvSolutions, controlDict
   patoTmpltDir = os.getenv("DGD").."/share/pato-templates"
   filesToCopy = {"controlDict", "fvSchemes", "fvSolution"}
   for _,f in ipairs(filesToCopy) do
      cmd = string.format("cp %s/%s %s/", patoTmpltDir, f, systemDir)
      os.execute(cmd)
   end

   if (vrbLvl >= 1) then
      print("   DONE: Creating system templates.")
   end
end

function adjustDirectoriesForPATO()
   -- constant directory
   os.execute(string.format("mv %s/pointPriority %s", constantDir, constantMatDir))
   os.execute(string.format("mv %s/polyMesh %s", constantDir, constantMatDir))

   -- system directory
   os.execute(string.format("mv %s/fvSchemes %s", systemDir, systemMatDir))
   os.execute(string.format("mv %s/fvSolution %s", systemDir, systemMatDir))
   os.execute(string.format("mv %s/collapseDict %s", systemDir, systemMatDir))
   os.execute(string.format("mv %s/createPatchDict %s", systemDir, systemMatDir))
end

function main(verbosityLevel)
   vrbLvl = verbosityLevel
   -- make sure FoamBlocks have been defined and pato flag set to true
   checkFoamBlocks(blks, vrbLvl)
   checkPATOFlag(blks, vrbLvl)

   -- check model choices
   checkSetting(energyModel, energyModelList, "energy model")
   checkSetting(material, materialList, "material")

   -- create required directories and templates
   writeOriginDir()
   writeConstantDir()
   writeSystemDir()

   -- merge blocks, assign boundary labels and write mesh
   myMesh = mergeBlocks(blks, vrbLvl)
   markInternalBoundaries(myMesh, blks)
   amendTags(myMesh)
   clearPolyMesh(constantDir)
   writeMesh(constantDir)
   writeCreatePatchDict(myMesh, blks)
   runCreatePatchDict()
   if (axisymmetric) then
      if (collapseEdges) then
         runCollapseEdges(systemDir)
      end
   end
   runCreatePatchDict_empty()
   runRenumberMesh()
   runCheckMesh()
   checkUnassignedBoundaries(blks)

   -- The OpenFOAM commands: createPatch, collapseEdges and renumberMesh
   -- make assumptions about the directory structure.
   -- PATO makes different assumptions about directory structure.
      -- The commands above are executed assuming the regular OpenFOAM
   -- structure and then certain files are relocated to suit PATO.

   adjustDirectoriesForPATO()
end
