-- foam-mesh.lua
-- Lua helper definitions for the D program: foam-mesh
--
-- Authors: Rowan G., Ingo J., and Peter J.
-- Date: 2017-07-03
-- 
-- Reece O. 2025-02-07
-- General OpenFOAM definitions were moved to openfoam.lua to facilitate
-- grid generation for PATO.

require "openfoam"

-- Global settings
turbulenceModel = "none" -- Options are: "S-A" and "k-epsilon"
compressible = false  -- Options are: "true" and "false". Set dimensions for initial conditions

turbulenceModelList = {
   "none", -- if not specified
   "S-A", -- for Spallart-Allmaras
   "k-epsilon", -- for k-epsilon model
}

function checkTurbulenceModel(turbulenceModel)
   local labelOK = false
   for _,allowed in ipairs(turbulenceModelList) do
      if (turbulenceModel == allowed) then
         labelOK = true
      end
   end
   -- If labelOK is still false at end, then this particular
   -- label was badly formed.
   if not labelOK then
      print(string.format("The turbulence_model '%s' is not allowed.", turbulenceModel))
      print("Allowed turbulence models are:")
      for _,allowed in ipairs(turbulenceModelList) do
         print(allowed)
      end
      os.exit(1)
   end
end

compressibleList = {
   true,
   false
}

function checkCompressible(compressible,compressibleList)
   local labelOK = false
   for _,allowed in ipairs(compressibleList) do
      if (compressible == allowed) then
         labelOK = true
      end
   end
   -- If labelOK is still false at end, then this particular
   -- label was badly formed.
   if not labelOK then
      print(string.format("The compressible '%s' is not allowed.", compressible))
      print("Allowed turbulence models are:")
      for _,allowed in ipairs(compressibleList) do
         print(allowed)
      end
      os.exit(1)
   end
end

function writeCreatePatchDict(grid, blks)
   if (vrbLvl >= 1) then
      print("Writing out file: createPatchDict.")
   end
   makeDir(systemDir)
   fname = systemDir.."/createPatchDict"

   f = assert(io.open(fname, 'w'))
   f:write(string.format("// Auto-generated by foamMesh on %s\n", os.date("%d-%b-%Y at %X")))
   f:write("\n")
   f:write("FoamFile\n")
   f:write("{\n")
   f:write("    version     2.0;\n")
   f:write("    format      ascii;\n")
   f:write("    class       dictionary;\n")
   f:write("    object      createPatchDict;\n")
   f:write("}\n")
   f:write("\n")
   f:write("pointSync false;\n")
   f:write("\n")
   f:write("patches\n")
   f:write("(\n")
   for label,_ in pairs(globalBndryLabels) do
      bType = "patch"
      if label == "FrontAndBack" then
         bType = "empty"
      end
      if label == "wedge-front" or label == "wedge-rear" then
         bType = "symmetry"
      end
      if label == "unassigned" then
         bType = "unassigned"
      end
      labelPrefix = string.sub(label, 1, 2)
      if labelPrefix == "w-" then
         bType = "wall"
      end
      if labelPrefix == "i-" then
         bType = "patch"
      end
      if labelPrefix == "o-" then
         bType = "patch"
      end
      if labelPrefix == "s-" then
         bType = "symmetry"
      end
      if labelPrefix == "p-" then
         bType = "patch"
      end
      f:write("    {\n")
      f:write(string.format("        name %s;\n", label))
      f:write("        patchInfo\n")
      f:write("        {\n")
      f:write(string.format("            type  %s;\n", bType))
      f:write("        }\n")
      f:write("        constructFrom patches;\n")
      f:write("        patches (\n")
      for ib, blk in ipairs(blks) do
         for bndry, bndryLabel in pairs(blk.bndry_labels) do
            if (bndryLabel == label) then
               iBndry = 6*(ib-1) + faceMap[bndry]
               tag = grid:get_boundaryset_tag(iBndry)
               if (not grid:is_boundaryset_empty(iBndry)) then
                  f:write(string.format("            %s \n", tag))
               end
            end
         end
      end
      f:write("        );\n")
      f:write("    }\n")
   end
   f:write(");\n")
   f:close()
   if (vrbLvl >= 1) then
      print("   DONE: Writing out file: createPatchDict.")
   end
end

function writeNoughtDir_old()  -- copy existing templates
   if (vrbLvl >= 1) then
      print("Creating templates.")
   end
   -- Check if 0 exists.
   retVal = os.execute(string.format("test -d %s", noughtDir))
   if retVal == 0 then
      -- 0/ already exists.
      -- We don't want to override this, so we'll place the template
      -- files in 0_temp
      dirName = "0_temp"
   else
      -- 0/ does not exist
      -- So we'll create it and place template files in there.
      dirName = "0"
   end
   makeDir(dirName)
   if (vrbLvl >= 1) then
      print("Templates will go in: ", dirName)
   end
   -- Now copy required template files in place.
   foamTmpltDir = os.getenv("DGD").."/share/foamMesh-templates"
   filesToCopy = {"p", "U"}
   if turbulenceModel == "S-A" then
      filesToCopy[#filesToCopy+1] = "nut"
      filesToCopy[#filesToCopy+1] = "nuTilda"
   end
   if turbulenceModel == "k-epsilon" then
      filesToCopy[#filesToCopy+1] = "k"
      filesToCopy[#filesToCopy+1] = "epsilon"
   end
   for _,f in ipairs(filesToCopy) do
      cmd = string.format("cp %s/%s %s/", foamTmpltDir, f, dirName)
      os.execute(cmd)
   end
   if (vrbLvl >= 1) then
      print("   DONE: Creating templates.")
   end
end

function writeNoughtDir()  -- create to suit patch types
   if (vrbLvl >= 1) then
      print("Creating initial & boundary condition templates.")
   end
   -- Check if 0 exists.
   retVal = os.execute(string.format("test -d %s", noughtDir))
   if retVal == 0 then
      -- 0/ already exists.
      -- We don't want to override this, so we'll place the template
      -- files in 0_temp
      dirName = noughtDir.."_temp"
   else
      -- 0/ does not exist
      -- So we'll create it and place template files in there.
      dirName = noughtDir
   end
   makeDir(dirName)
   if (vrbLvl >= 1) then
      print("   Templates will go in: ", dirName)
   end
   -- Now create the appropriate files.
   write_p_file()
   write_U_file()
   if turbulenceModel == "S-A" then
      write_nut_file()
      write_nuTilda_file()
   end
   if turbulenceModel == "k-epsilon" then
      write_k_file()
      write_epsilon_file()
   end
   if (vrbLvl >= 1) then
      print("   DONE: Creating templates.")
   end
end


function write_p_file()
   if (vrbLvl >= 1) then
      print("   Writing p file.")
   end
   fname = string.format("%s/p",dirName)
   f = assert(io.open(fname, 'w'))
   writeFoamHeader(f)
   f:write("    class       volScalarField;\n")
   f:write('    location    "0";\n')
   f:write("    object      p;\n")
   f:write("}\n")
   f:write("// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * // \n")
   f:write("\n")
   if (compressible == true) then
      f:write("dimensions      [1 -1 -2 0 0 0 0];\n")
   elseif (compressible == false) then
      f:write("dimensions      [0 2 -2 0 0 0 0];\n")
   else
      print('Incorrect setting for compressible')
   end
   f:write("\n")
   f:write("internalField   uniform 0; \n")
   f:write("\n")
   f:write("boundaryField \n")
   f:write("{ \n")
   -- now go through globalBndryLabels list
   for label,_ in pairs(globalBndryLabels) do
      writeStandardBC(f, label)
      labelPrefix = string.sub(label, 1, 2)
      if labelPrefix == "i-" then
         f:write(string.format("    %s\n", label))
         f:write("    { \n")
         f:write("        type    fixedValue;\n")
         f:write("        value   uniform 0;\n")
         f:write("    }\n")
      end
      if labelPrefix == "o-" then
         f:write(string.format("    %s\n", label))
         f:write("    { \n")
         f:write("        type    zeroGradient;\n")
         f:write("    }\n")
      end
      if labelPrefix == "w-" then
         f:write(string.format("    %s\n", label))
         f:write("    { \n")
         f:write("        type    zeroGradient;\n")
         f:write("    }\n")
      end
      if labelPrefix == "s-" then
         f:write(string.format("    %s\n", label))
         f:write("    { \n")
         f:write("        type    symmetry;\n")
         f:write("    }\n")
      end
      if labelPrefix == "p-" then
         f:write(string.format("    %s\n", label))
         f:write("    { \n")
         f:write("        type    zeroGradient;\n")
         f:write("    }\n")
      end
   end
   f:write("}\n")
   f:write("\n")
   f:write("// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * // \n")
   f:close()
  if (vrbLvl >= 1) then
      print("      DONE: Writing p file.")
   end
end

function write_U_file()
   if (vrbLvl >= 1) then
      print("   Writing U file.")
   end
   fname = string.format("%s/U",dirName)
   f = assert(io.open(fname, 'w'))
   writeFoamHeader(f)
   f:write("    class       volVectorField;\n")
   f:write('    location    "0";\n')
   f:write("    object      U;\n")
   f:write("}\n")
   f:write("// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * // \n")
   f:write("\n")
   f:write("dimensions      [0 1 -1 0 0 0 0];\n")
   f:write("\n")
   f:write("internalField   uniform (0 0 0); \n")
   f:write("\n")
   f:write("boundaryField \n")
   f:write("{ \n")
   -- now go through globalBndryLabels list
   for label,_ in pairs(globalBndryLabels) do
      writeStandardBC(f, label)
      labelPrefix = string.sub(label, 1, 2)
      if labelPrefix == "i-" then
         f:write(string.format("    %s\n", label))
         f:write("    { \n")
         f:write("        type    fixedValue;\n")
         f:write("        value   uniform (0 0 0);\n")
         f:write("    }\n")
      end
      if labelPrefix == "o-" then
         f:write(string.format("    %s\n", label))
         f:write("    { \n")
         f:write("        type    zeroGradient;\n")
         f:write("    }\n")
      end
      if labelPrefix == "w-" then
         f:write(string.format("    %s\n", label))
         f:write("    { \n")
         f:write("        type    noSlip;\n")
         f:write("    }\n")
      end
      if labelPrefix == "s-" then
         f:write(string.format("    %s\n", label))
         f:write("    { \n")
         f:write("        type    symmetry;\n")
         f:write("    }\n")
      end
      if labelPrefix == "p-" then
         f:write(string.format("    %s\n", label))
         f:write("    { \n")
         f:write("        type    zeroGradient;\n")
         f:write("    }\n")
      end
   end
   f:write("}\n")
   f:write("\n")
   f:write("// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * // \n")
   f:close()
  if (vrbLvl >= 1) then
      print("      DONE: Writing U file.")
   end
end

function write_nut_file()
   if (vrbLvl >= 1) then
      print("   Writing nut file.")
   end
   fname = string.format("%s/nut",dirName)
   f = assert(io.open(fname, 'w'))
   writeFoamHeader(f)
   f:write("    class       volScalarField;\n")
   f:write('    location    "0";\n')
   f:write("    object      nut;\n")
   f:write("}\n")
   f:write("// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * // \n")
   f:write("\n")
   f:write("dimensions      [0 2 -1 0 0 0 0];\n")
   f:write("\n")
   f:write("internalField   uniform 0.1; \n")
   f:write("\n")
   f:write("boundaryField \n")
   f:write("{ \n")
   -- now go through globalBndryLabels list
   for label,_ in pairs(globalBndryLabels) do
      writeStandardBC(f, label)
      labelPrefix = string.sub(label, 1, 2)
      if labelPrefix == "i-" then
         f:write(string.format("    %s\n", label))
         f:write("    { \n")
         f:write("        type    fixedValue;\n")
         f:write("        value   uniform 0.1;\n")
         f:write("    }\n")
      end
      if labelPrefix == "o-" then
         f:write(string.format("    %s\n", label))
         f:write("    { \n")
         f:write("        type    zeroGradient;\n")
         f:write("    }\n")
      end
      if labelPrefix == "w-" then
         f:write(string.format("    %s\n", label))
         f:write("    { \n")
         f:write("        type    nutUSpaldingWallFunction;;\n")
         f:write("        value   uniform 0;\n")
         f:write("    }\n")
      end
      if labelPrefix == "s-" then
         f:write(string.format("    %s\n", label))
         f:write("    { \n")
         f:write("        type    symmetry;\n")
         f:write("    }\n")
      end
      if labelPrefix == "p-" then
         f:write(string.format("    %s\n", label))
         f:write("    { \n")
         f:write("        type    zeroGradient;\n")
         f:write("    }\n")
      end
   end
   f:write("}\n")
   f:write("\n")
   f:write("// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * // \n")
   f:close()
  if (vrbLvl >= 1) then
      print("      DONE: Writing nut file.")
   end
end

function write_nuTilda_file()
   if (vrbLvl >= 1) then
      print("   Writing nuTilda file.")
   end
   fname = string.format("%s/nuTilda",dirName)
   f = assert(io.open(fname, 'w'))
   writeFoamHeader(f)
   f:write("    class       volScalarField;\n")
   f:write('    location    "0";\n')
   f:write("    object      nuTilda;\n")
   f:write("}\n")
   f:write("// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * // \n")
   f:write("\n")
   f:write("dimensions      [0 2 -1 0 0 0 0];\n")
   f:write("\n")
   f:write("internalField   uniform 0; \n")
   f:write("\n")
   f:write("boundaryField \n")
   f:write("{ \n")
   -- now go through globalBndryLabels list
   for label,_ in pairs(globalBndryLabels) do
      writeStandardBC(f, label)
      labelPrefix = string.sub(label, 1, 2)
      if labelPrefix == "i-" then
         f:write(string.format("    %s\n", label))
         f:write("    { \n")
         f:write("        type    fixedValue;\n")
         f:write("        value   uniform 0;\n")
         f:write("    }\n")
      end
      if labelPrefix == "o-" then
         f:write(string.format("    %s\n", label))
         f:write("    { \n")
         f:write("        type    zeroGradient;\n")
         f:write("    }\n")
      end
      if labelPrefix == "w-" then
         f:write(string.format("    %s\n", label))
         f:write("    { \n")
         f:write("        type    fixedValue;\n")
         f:write("        value   uniform 0;\n")
         f:write("    }\n")
      end
      if labelPrefix == "s-" then
         f:write(string.format("    %s\n", label))
         f:write("    { \n")
         f:write("        type    symmetry;\n")
         f:write("    }\n")
      end
      if labelPrefix == "p-" then
         f:write(string.format("    %s\n", label))
         f:write("    { \n")
         f:write("        type    zeroGradient;\n")
         f:write("    }\n")
      end
   end
   f:write("}\n")
   f:write("\n")
   f:write("// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * // \n")
   f:close()
  if (vrbLvl >= 1) then
      print("      DONE: Writing nuTilda file.")
   end
end

function write_k_file()
   if (vrbLvl >= 1) then
      print("   Writing k file.")
   end
   fname = string.format("%s/k",dirName)
   f = assert(io.open(fname, 'w'))
   writeFoamHeader(f)
   f:write("    class       volScalarField;\n")
   f:write('    location    "0";\n')
   f:write("    object      k;\n")
   f:write("}\n")
   f:write("// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * // \n")
   f:write("\n")
   f:write("dimensions      [0 2 -2 0 0 0 0];\n")
   f:write("\n")
   f:write("internalField   uniform 1; \n")
   f:write("\n")
   f:write("boundaryField \n")
   f:write("{ \n")
   -- now go through globalBndryLabels list
   for label,_ in pairs(globalBndryLabels) do
      writeStandardBC(f, label)
      labelPrefix = string.sub(label, 1, 2)
      if labelPrefix == "i-" then
         f:write(string.format("    %s\n", label))
         f:write("    { \n")
         f:write("        type    fixedValue;\n")
         f:write("        value   uniform 1;\n")
         f:write("    }\n")
      end
      if labelPrefix == "o-" then
         f:write(string.format("    %s\n", label))
         f:write("    { \n")
         f:write("        type    zeroGradient;\n")
         f:write("    }\n")
      end
      if labelPrefix == "w-" then
         f:write(string.format("    %s\n", label))
         f:write("    { \n")
         f:write("        type    kqRWallFunction;;\n")
         f:write("        value   uniform 1;\n")
         f:write("    }\n")
      end
      if labelPrefix == "s-" then
         f:write(string.format("    %s\n", label))
         f:write("    { \n")
         f:write("        type    symmetry;\n")
         f:write("    }\n")
      end
      if labelPrefix == "p-" then
         f:write(string.format("    %s\n", label))
         f:write("    { \n")
         f:write("        type    zeroGradient;\n")
         f:write("    }\n")
      end
   end
   f:write("}\n")
   f:write("\n")
   f:write("// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * // \n")
   f:close()
  if (vrbLvl >= 1) then
      print("      DONE: Writing k file.")
   end
end

function write_epsilon_file()
   if (vrbLvl >= 1) then
      print("   Writing epsilon file.")
   end
   fname = string.format("%s/epsilon",dirName)
   f = assert(io.open(fname, 'w'))
   writeFoamHeader(f)
   f:write("    class       volScalarField;\n")
   f:write('    location    "0";\n')
   f:write("    object      epsilon;\n")
   f:write("}\n")
   f:write("// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * // \n")
   f:write("\n")
   f:write("dimensions      [0 2 -3 0 0 0 0];\n")
   f:write("\n")
   f:write("internalField   uniform 1; \n")
   f:write("\n")
   f:write("boundaryField \n")
   f:write("{ \n")
   -- now go through globalBndryLabels list
   for label,_ in pairs(globalBndryLabels) do
      writeStandardBC(f, label)
      labelPrefix = string.sub(label, 1, 2)
      if labelPrefix == "i-" then
         f:write(string.format("    %s\n", label))
         f:write("    { \n")
         f:write("        type    fixedValue;\n")
         f:write("        value   uniform 1;\n")
         f:write("    }\n")
      end
      if labelPrefix == "o-" then
         f:write(string.format("    %s\n", label))
         f:write("    { \n")
         f:write("        type    zeroGradient;\n")
         f:write("    }\n")
      end
      if labelPrefix == "w-" then
         f:write(string.format("    %s\n", label))
         f:write("    { \n")
         f:write("        type    epsilonWallFunction;\n")
         f:write("        value   uniform 1;\n")
         f:write("    }\n")
      end
      if labelPrefix == "s-" then
         f:write(string.format("    %s\n", label))
         f:write("    { \n")
         f:write("        type    symmetry;\n")
         f:write("    }\n")
      end
      if labelPrefix == "p-" then
         f:write(string.format("    %s\n", label))
         f:write("    { \n")
         f:write("        type    zeroGradient;\n")
         f:write("    }\n")
      end
   end
   f:write("}\n")
   f:write("\n")
   f:write("// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * // \n")
   f:close()
  if (vrbLvl >= 1) then
      print("      DONE: Writing epsilon file.")
   end
end

function main(verbosityLevel)
   vrbLvl = verbosityLevel
   -- Before doing anything, test if the user has defined any blocks.
   checkFoamBlocks(blks, vrbLvl)

   -- Check that global settings are correct
   checkTurbulenceModel(turbulenceModel)
   checkCompressible(compressible,compressibleList)

   myMesh = mergeBlocks(blks, vrbLvl)
   markInternalBoundaries(myMesh, blks)
   amendTags(myMesh)
   clearPolyMesh(constantDir)
   writeMesh(constantDir)
   writeCreatePatchDict(myMesh, blks)
   runCreatePatchDict()
   if (axisymmetric) then
      if (collapseEdges) then
         runCollapseEdges(systemDir)
      end
   end
   runCreatePatchDict_empty() -- required to remove empty patches
   runRenumberMesh()
   writeNoughtDir()
   runCheckMesh()
   checkUnassignedBoundaries(blks)
end
